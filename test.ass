[Script Info]
; Script generated by Aegisub r8942
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Video File: ?dummy:23.976000:40000:1920:1080:69:69:69:
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Active Line: 2

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,0,0,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,code,--相关配置说明见lua文件
Comment: 0,0:00:00.00,0:00:00.00,Default,config table,0,0,0,code once,config = {  t = {s=0,e=20000},  size = {x=30,y=30},  distance = {x=10,y=10},  speed = 100,  shape = {  	live="m 0 0 l 10 0 10 10 0 10", 	die="m 0 0 l 10 0 10 10 0 10" 	}, pos = {x=800,y=500},  --[[ state = "die",  border = 3,  mode = "reverse",  --]] custum={ 	test1={10,10,11,10,12,9,12,11,13,10,14,10,15,10,16,10,17,9,17,11,18,10,19,10}, 	test2={2,6,2,7,3,6,3,7,12,6,12,7,12,8,13,5,13,9,14,4,14,10,15,4,15,10,16,7,17,5,17,9,18,6,18,7,18,8,19,7,22,4,22,5,22,6,23,4,23,5,23,6,24,3,24,7,26,2,26,3,26,7,26,8,36,4,36,5,37,4,37,5}, 	}, offset = {x=1,y=2},  }
Comment: 0,0:00:00.00,0:00:00.00,Default,func,0,0,0,code once,local coroutine = _G.coroutine local pairs = _G.pairs local assert = _G.assert local type = _G.type local setmetatable = _G.setmetatable local getmetatable = _G.getmetatable local aegisub_progress_set = _G.aegisub.progress.set local aegisub_debug_out = _G.aegisub.debug.out function configCheck(config,world_name) 	assert(config,"table 'config' not found!") 	assert(config.t,"table 'config.t' not found!") 	assert(config.size,"table 'config.size' not found!") 	assert(config.speed,"table 'config.speed' not found!") 	assert(config.shape,"table 'config.shape' not found!") 	assert(config.distance,"table 'config.distance' not found!") 	if world_name then assert(config.custum[world_name],"table 'config.custum."..world_name.."' not found!") end 	if not config.pos then config.pos = {x=0,y=0} end 	if not config.border then config.border = 2 end 	if not config.pos then config.pos = {x=0,y=0} end 	if not config.offset then config.offset = {x=0,y=0} end 	local function floor_abs(num) 		return math.abs(math.floor(num)) 	end 	config.size.x = floor_abs(config.size.x) 	config.size.y = floor_abs(config.size.y) 	config.border = floor_abs(config.border) 	config.offset.x = math.floor(config.offset.x) 	config.offset.y = math.floor(config.offset.y) 	if config.border == 0 then config.border = 1 end  	if world_name then 		local max_num_x,max_num_y = 0,0 		for i=1,#config.custum[world_name],2 do 			if config.custum[world_name][i] > max_num_x then 				max_num_x = config.custum[world_name][i] 			end 			if config.custum[world_name][i+1] > max_num_y then 				max_num_y = config.custum[world_name][i+1] 			end 		end 		if max_num_x > config.size.x then 			config.size.x = max_num_x + 2 		end 		if max_num_y > config.size.y then 			config.size.y = max_num_y + 2 		end 	end end function cloneTable(object)     local lookup_table = {}     local function copy(object)         if type(object) ~= "table" then             return object         elseif lookup_table[object] then             return lookup_table[object]         end         local new_table = {}         lookup_table[object] = new_table         for key, value in pairs(object) do             new_table[copy(key)] = copy(value)         end         return setmetatable(new_table, getmetatable(object))     end     return copy(object) end function createWorld(config,world_name) 	local world = {} 	if world_name then  		for y=1 - config.border,config.size.y + config.border do 			world[y] = {} 			for x=1 - config.border,config.size.x + config.border do 				world[y][x] = 0  			end 		end 		for i=1,#config.custum[world_name],2 do  			local x = config.custum[world_name][i] + config.offset.x 			local y = config.custum[world_name][i+1] + config.offset.y 			world[y][x] = 1 		end 	else  		for y=1 - config.border,config.size.y + config.border do 			world[y] = {} 			for x=1 - config.border,config.size.x + config.border do 				world[y][x] = math.random(0,1)  			end 		end 	end 	return world end evolution = coroutine.create( 	function (config,world_name) 		local world = createWorld(config,world_name)  		local world_tmp = {} 		while true do 			coroutine.yield(world) 			for y=1 - config.border + 1,config.size.y + config.border - 1 do 				world_tmp[y] = {} 				for x=1 - config.border + 1,config.size.x + config.border - 1 do 					sum = 						world[y-1][x-1] + world[y-1][x] + world[y-1][x+1] + 						world[y][x-1]  			+			world[y][x+1] + 						world[y+1][x-1] + world[y+1][x] + world[y+1][x+1] 					if (sum == 3) then  						world_tmp[y][x] = 1 					elseif (sum == 2) then  						world_tmp[y][x] = world[y][x] 					else 						world_tmp[y][x] = 0  					end 				end 			end 			for y=1 - config.border + 1,config.size.y + config.border - 1 do 				for x=1 - config.border + 1,config.size.x + config.border - 1 do 					world[y][x] = world_tmp[y][x] 				end 			end 		end 	end ) outPutCell = coroutine.create( 	function (config,evolution_all,evolution_times,state,mode) 		local key_s,key_e,step 		local function outPutMode(mode)  			if mode == "reverse" then 				key_s = evolution_times 				key_e = 1 				step = -1 			elseif mode == "Positive" then 				key_s = 1 				key_e = evolution_times 				step = 1 			end 		end 		outPutMode(mode) 		local function outPutPos(i,key_y,key_x,val_x,state)  			if val_x == state then 				local pos_y = config.pos.y + config.distance.y * (key_y-1)  				local pos_x = config.pos.x + config.distance.x * (key_x-1)  				local time_s = config.t.s + (i-1) * config.speed  				local time_e = config.t.s + (i-1) * config.speed + config.speed  				coroutine.yield(pos_x,pos_y,time_s,time_e) 			end 		end 		for i=key_s,key_e,step do 			local world = evolution_all[i]  			for key_y=1,config.size.y do 				local val_y = world[key_y] 				for key_x=1,config.size.x do 					local val_x = val_y[key_x] 					outPutPos(i,key_y,key_x,val_x,state) 				end 			end 		end 	end ) GoL = coroutine.create( 	function (config,world_name) 		local evolution_times = math.floor( (config.t.e - config.t.s)/config.speed )  		local evolution_all = {}  		local evolution_qty = {live={},die={},live_all=0,die_all=0}  		for i=1,evolution_times do  			local _,world = coroutine.resume(evolution,config,world_name) 			evolution_qty.live[i] = 0 			evolution_qty.die[i] = 0 			for key_y=1,config.size.y do 				local val_y = world[key_y] 				for key_x=1,config.size.x do 					local val_x = val_y[key_x] 					if val_x == 1 then 						evolution_qty.live[i] = evolution_qty.live[i] + 1  						evolution_qty.live_all = evolution_qty.live_all + 1  					elseif val_x == 0 then 						evolution_qty.die[i] = evolution_qty.die[i] + 1  						evolution_qty.die_all = evolution_qty.die_all + 1  					end 				end 			end 			evolution_all[i] = cloneTable(world) 		end 		local state,state_str,mode,loops,shape 		local function stateCheck(config)  			if config.state == "die" then  				state = 0 				state_str = "die" 				loops = evolution_qty.die_all 				shape = config.shape.die 			else 				state = 1 				state_str = "live" 				loops = evolution_qty.live_all 				shape = config.shape.live 			end 			if config.mode == "reverse" then  				mode = "reverse" 			else 				mode = "Positive" 			end 		end 		stateCheck(config) 		maxloop(loops)  		for i=1,evolution_times do 			for loops=1,evolution_qty[state_str][i] do  				local _,pos_x,pos_y,time_s,time_e = coroutine.resume(  					outPutCell, 					config, 					evolution_all, 					evolution_times, 					state, 					mode 					) 				retime("set",time_s,time_e)  				local progress_percent = i/evolution_times*100  				coroutine.yield(pos_x,pos_y,shape,progress_percent) 			end 		end 	end ) function gameOfLife(config,world_name) 	configCheck(config,world_name)  	local _,pos_x,pos_y,shape,progress_percent = coroutine.resume(GoL,config,world_name)  	aegisub_progress_set(progress_percent)  	aegisub_debug_out("\n CreateWorld "..progress_percent.."% ...")  	local str = 		"{".. 		"\\an7".. 		"\\pos("..pos_x..","..pos_y..")".. 		"\\p1".. 		"}".. 		shape 	return str end
Dialogue: 0,0:00:00.00,0:00:00.00,Default,custum_world 1 test,0,0,0,template line notext,!gameOfLife(config,"test1")!
Comment: 0,0:00:00.00,0:00:00.00,Default,custum_world 2 test,0,0,0,template line notext,!gameOfLife(config,"test2")!
Dialogue: 0,0:00:00.00,0:00:00.00,Default,def_world test,0,0,0,template line notext,!gameOfLife(config)!
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,
